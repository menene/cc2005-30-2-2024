# -*- coding: utf-8 -*-
"""World Cup.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T1_cgUxe41HW2hugfb5Jz9zxedV0j7je

# FIFA World Cup

Datos desde la primera copa del mundo en Uruguay 1930 hasta Brasil 2014. Se detalla cada partido y se muestra información relevante.

Fuente de los datos:
https://www.kaggle.com/datasets/abecklas/fifa-world-cup

Importar las librerías de Pandas
"""

import pandas as pd

"""Abrir el csv con datos del mundial"""

wc = pd.read_csv('worldcup.csv')

"""Ver el contenido del archivo:"""

print(wc)

print(wc.shape)

"""## Filtros Básicos

Resultados solo de Brasil 2014
"""

brazil = wc.loc[wc["Year"] == 2014]

print(brazil)

brazil_goles = brazil[["Stage", "Home Team Name", "Away Team Name", "Home Team Goals", "Away Team Goals"]]

print(brazil_goles)

print(brazil_goles.describe())

"""Imprimir la información de todas las finales"""

finals = wc.loc[wc["Stage"] == "Final"]

print(finals)

print(finals[["Year", "Home Team Name", "Home Team Goals", "Away Team Name", "Away Team Goals"]])

"""Partidos con más de 10 goles"""

muchos_goles = wc.loc[wc["Home Team Goals"] + wc["Away Team Goals"] >= 10]

print(muchos_goles)

"""## Filtros Avanzados

Victorias de Argentina de local 🇦🇷
"""

argentina_local = wc.loc[(wc["Home Team Name"] == "Argentina") & (wc["Home Team Goals"] > wc["Away Team Goals"])]

print(argentina_local)

print(argentina_local.shape)

"""Victorias de Argentina de visita 🇦🇷"""

# argentina_visita = wc.loc[(wc["Away Team Name"] == "Argentina") & (wc["Home Team Goals"] < wc["Away Team Goals"])]
argentina_visita = wc.query("`Away Team Name` == 'Argentina' and `Home Team Goals` < `Away Team Goals`")

print(argentina_visita)

print(argentina_visita.shape)

"""Victorias de Argentina"""

frames = [argentina_local, argentina_visita]

argentina = pd.concat(frames)

print(argentina)

print(argentina.shape)

"""Finales de Holanda 🇳🇱

Es posible usar la función query para hacer más "natural" la búsqueda. Query significa consulta.
"""

netherlands = wc.query("Stage == 'Final' and (`Home Team Name` == 'Netherlands' or `Away Team Name` == 'Netherlands')")
#netherlands = wc.loc[(wc["Stage"] == "Final") & ((wc["Home Team Name"] == "Netherlands") | (wc["Away Team Name"] == "Netherlands"))]

print(netherlands[["Year", "Stadium"]])

maracanasos_locales = wc.query("Stadium == 'Estadio do Maracana' and `Home Team Goals` > `Away Team Goals`")

print(maracanasos_locales)

"""## Otras operaciones

La función copy genera un dataset nuevo sin relación al dataset del que se está filtrando:
"""

just_finals = wc.query("Stage == 'Final'").copy()

print(just_finals)

"""Podemos agregar filas a nuestro dataframe simplemente asignando la nueva columna y el valor:"""

just_finals["Total_Goals"] = just_finals["Home Team Goals"] + just_finals["Away Team Goals"]

print(just_finals)

"""También es posible hacer esto aplicando una función:"""

def winner(row):
  if row["Home Team Goals"] > row["Away Team Goals"]:
    return row["Home Team Name"]
  elif row["Home Team Goals"] < row["Away Team Goals"]:
    return row["Away Team Name"]
  else:
    return "Draw"

just_finals["Winner"] = just_finals.apply(winner, axis=1)

print(just_finals)

jf = just_finals[["Year", "Winner", "Home Team Name", "Away Team Name", "Total_Goals"]]

print(jf)

"""Exportar a csv es tan fácil como leer archivos:"""

jf.to_csv('finals.csv', index=False)

df = pd.read_csv("finals.csv")

print(df)

"""Para agrupar se puese utilizar la función groupby:"""

winnings_by_team = just_finals.groupby('Winner')['Total_Goals'].count()

print(winnings_by_team)

"""Para determinar los años en los que cada equípo fue campón se puede usar la función value_counts:"""

winners = just_finals.groupby('Winner')['Year'].value_counts()

print(winners)

"""Ya que el value_counts no es muy intuitiva se puede encadenar la función unstack() para que muestre la información en una tabla"""

winners = just_finals.groupby('Winner')['Year'].value_counts().unstack()

print(winners)

"""Esa tabla no es legible por lo que podemos sustituir los valores de NaN por espacios vacíos o por cualquier otro valor:"""

winners.fillna("", inplace=True)

print(winners)

winners = winners.replace(1.0, "Yes")
winners = winners.replace(2.0, "Yes")

print(winners)

"""Esta tabla ya es más legible y útil por lo que queremos guardarla. Para hacer esto podemos hacer lo siguiente:"""

winners.to_csv('winners.csv', index=True)

"""También se pueden hacer agrupaciones más complejas:

Antes vamos a crear nuestra columna de goles totales en todo el dataframe y vamos a ver que es un proceso altamente eficiente
"""

wc["Total_Goals"] = wc["Home Team Goals"] + wc["Away Team Goals"]

print(wc)

mega_agrupado = wc.groupby(["Year", "Stage"])["Total_Goals"].agg(["sum", "mean", "max", "min"])

print(mega_agrupado)

mega_agrupado.to_csv("goles_fase_año.csv")

"""## Gráficas"""

import matplotlib.pyplot as plt

"""### Cantidad de victorias por selección"""

# winnings_by_team.plot(kind="bar", title="Victorias del Mundial por Selección", grid=True, stacked=False, rot=45)
winnings_by_team.plot(kind="bar", title="Victorias del Mundial por Selección", grid=True, rot=45)
plt.xlabel('Selecciones')
plt.ylabel('Mundiales ganados')
plt.show()

"""### Cantidad de goles por mundial"""

#goals = wc.groupby("Year")[["Total_Goals", "Year"]].sum()
goals = wc.groupby("Year")["Total_Goals"].sum()

print(goals)

# goals.plot(kind="line", title="Goles totales por mundial", grid=False, rot=45, lw=0.5)
goals.plot(kind="line", title="Goles totales por mundial", grid=False, rot=0, lw=0.5)
plt.legend(title='Leyenda', loc='upper left')
plt.xlabel('Año')
plt.ylabel('Goles')
plt.show()

"""### Goles por etapa de Brazil 2014"""

goals = wc.query("Year == 2014").groupby("Stage")["Total_Goals"].sum()

print(goals)

# goals.plot(kind="barh", title="Goles por fase Brasil 2014", grid=False, rot=45, figsize=(15,5))
goals.plot(kind="barh", title="Goles por fase Brasil 2014", grid=False, rot=0, figsize=(15,5))
# plt.legend(title='Goles', loc='lower right')
plt.xlabel('Goles')
plt.ylabel('Etapa')
plt.show()

"""### Gráfica multiple"""

goals = wc.query("Year >= 2010").groupby(["Year", "Stage"])["Total_Goals"].agg(["sum", "mean", "max", "min"])
# goals = wc.query("Year >= 2010").groupby(["Year", "Stage"])["Total_Goals"].describe()

print(goals)

goals.plot(kind="bar", title="Goles totales por mundial", grid=False, rot=90, figsize=(15,5), stacked=True)
plt.legend(title='Guía', loc='upper left')
plt.xlabel('Etapa')
plt.ylabel('Goles')
plt.show()

"""## Goles de mundiales por visita o loca"""

goals = wc.groupby("Year")["Home Team Goals"].sum()

print(goals)

"""### Victorias vs Derrotas Argentinas"""

arg = wc.query("`Home Team Name` == 'Argentina' or `Away Team Name` == 'Argentina'").copy()

print(arg)

def argentinian_result(row):
  if row["Home Team Name"] == "Argentina" and (row["Home Team Goals"] > row["Away Team Goals"]):
    return "Victory"
  elif row["Away Team Name"] == "Argentina" and (row["Home Team Goals"] < row["Away Team Goals"]):
    return "Victory"
  elif row["Home Team Name"] == "Argentina" and (row["Home Team Goals"] < row["Away Team Goals"]):
    return "Defeat"
  elif row["Away Team Name"] == "Argentina" and (row["Home Team Goals"] > row["Away Team Goals"]):
    return "Defeat"
  else:
    return "Draw"

arg["Arg_result"] = arg.apply(argentinian_result, axis=1)

print(arg)

arg_graph = arg["Arg_result"].value_counts()

print(arg_graph)

colors = ['pink', 'silver', 'steelblue']
explode = (0.05, 0.05, 0.05)

arg_graph.plot(kind="pie", title="Partidos Argentina", figsize=(10,7), autopct='%1.0f%%', colors=colors, explode=explode)
plt.legend(title='Resultado', loc='best')
plt.ylabel("")
plt.show()

"""### Sub plots"""

def winner_short(row):
  if row["Home Team Goals"] > row["Away Team Goals"]:
    return row["Home Team Initials"]
  else:
    return row["Away Team Initials"]

wc["Winner"] = wc.apply(winner_short, axis=1)

goals = wc.query("Year >= 2002").groupby("Year")["Total_Goals"].sum()
mean = wc.query("Year >= 2002").groupby("Year")["Total_Goals"].mean()
winners = wc.query("Stage == 'Final' and Winner not in ['FRG']").groupby("Winner")["Total_Goals"].count()

fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(15, 10))

goals.plot(ax=axes[0,0], kind="bar", rot=0, xlabel="")
mean.plot(ax=axes[0,1], kind="line", rot=0, xlabel="")
winners.plot(ax=axes[1,0], kind="pie", ylabel="")
winners.head(3).plot(ax=axes[1,1], kind="barh", ylabel="")